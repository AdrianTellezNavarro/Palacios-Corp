/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gestion_usuarios;

import java.awt.Image;
import java.sql.Connection;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.DriverManager;
import java.util.ArrayList;


public class Pasos extends javax.swing.JFrame {
    
    private String paso;
    private String proceso;
    private String[] pasosActuales;
    private String contraseña;
    private String nombre;
    private int id;
    private Connection conex;
    
    
    public Pasos(String paso, String proceso, String contraseña, String nombre, int id , Connection conex) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.paso = paso;
        this.proceso = proceso;
        this.id = id;
        
        jButton1.setVisible(false);
        
        inicializarPasosProceso();
        actualizarInterfaz();
    }
    
    private void inicializarPasosProceso() {
    int idMetodo = obtenerIdMetodo(proceso);
    
    if (idMetodo == 0) {
        pasosActuales = new String[]{"Proceso no reconocido"};
        return;
    }

    try {
        Connection conn = BD.conectar();
        
        String sql = "SELECT Titulo_Paso FROM paso WHERE ID_Metodo = ? ORDER BY orden";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, idMetodo);
        
        ResultSet rs = pstmt.executeQuery();
        
        ArrayList<String> pasosList = new ArrayList<>();
        
        while (rs.next()) {
            pasosList.add(rs.getString("Titulo_Paso"));
        }
        
        pasosActuales = pasosList.toArray(new String[0]);
        
        rs.close();
        pstmt.close();
        
    } catch (SQLException ex) {
        // En caso de error, usamos pasos genéricos
        pasosActuales = new String[]{"Error al cargar los pasos: " + ex.getMessage()};
        ex.printStackTrace();
    }
}

private int obtenerIdMetodo(String proceso) {
    switch(proceso) {
        case "Por Latinoamericano":
            return 1;
        case "Por Padres Mexicanos":
            return 2;
        case "Por Matrimonio con Mexican@":
            return 3;
        case "Por Hijos Mexicanos":
            return 4;
        default:
            return 0;
    }
    }
    
    private void actualizarInterfaz() {
    jLabel3.setText(paso);
    jLabel2.setText(proceso);
    
    try {
        // Obtener el ID_Metodo según el proceso
        int idMetodo = obtenerIdMetodo(proceso);
        
        if (idMetodo == 0) {
            tupu.setText("<html><div style='text-align: left;'>Proceso no reconocido</div></html>");
            return;
        }

        Connection conn = BD.conectar();
        
        String sql = "SELECT Descripcion_Paso FROM paso WHERE ID_Metodo = ? AND Titulo_Paso = ?";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, idMetodo);
        pstmt.setString(2, paso);
        
        ResultSet rs = pstmt.executeQuery();
        
        if (rs.next()) {
            String descripcion = rs.getString("Descripcion_Paso");
            tupu.setText("<html><div style='text-align: left;'>" + descripcion.replace("\n", "<br>") + "</div></html>");
            
            // Mostrar botón solo si es el paso del examen
            jButton1.setVisible(paso.equals("Presenta el examen de naturalización"));
        } else {
            tupu.setText("<html><div style='text-align: left;'>No se encontró información para este paso</div></html>");
            jButton1.setVisible(false);
        }
        
        rs.close();
        pstmt.close();
        
    } catch (SQLException ex) {
        tupu.setText("<html><div style='text-align: left; color: red;'>Error al cargar la descripción del paso: " + 
                    ex.getMessage() + "</div></html>");
        ex.printStackTrace();
    }
}

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        tupu = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(542, 348));
        jPanel1.setLayout(null);

        jLabel2.setText("jLabel2");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(120, 40, 320, 20);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("jLabel3");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(120, 30, 320, 11);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(120, 60, 0, 3);
        jPanel1.add(jSeparator2);
        jSeparator2.setBounds(120, 70, 320, 10);

        tupu.setText("jLabel1");
        tupu.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel1.add(tupu);
        tupu.setBounds(120, 80, 320, 180);

        jButton1.setText("Estudiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(230, 280, 100, 23);

        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(jLabel5);
        jLabel5.setBounds(100, 20, 360, 290);

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Siguiente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(435, 320, 100, 23);

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(10, 10, 72, 23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        MenuExamen obj = new MenuExamen(conex, id, contraseña, nombre); 
        
        obj.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    int indiceActual = -1;
    
    // Buscar el índice del paso actual
    for (int i = 0; i < pasosActuales.length; i++) {
        if (pasosActuales[i].equals(paso)) {
            indiceActual = i;
            break;
        }
    }
    
    // Avanzar al siguiente paso si no es el último
    if (indiceActual != -1 && indiceActual < pasosActuales.length - 1) {
        paso = pasosActuales[indiceActual + 1];
        
        // Actualizar la base de datos con el nuevo paso
        Connection conn = null;
        PreparedStatement pstmt = null;
        
        try {
            // Establecer conexión (ajusta estos parámetros)
            conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/relacional", 
                "root", 
                "Admin!01");
            
            // Query para actualizar el paso actual
            String sql = "UPDATE usuario SET Paso_Actual = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, paso);
            
            // Ejecutar la actualización
            int filasAfectadas = pstmt.executeUpdate();
            
            if (filasAfectadas == 0) {
                System.err.println("Advertencia: No se actualizó ningún registro en la BD");
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Error al actualizar el paso en la BD: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar recursos
            try {
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        
        // Actualizar la interfaz
        actualizarInterfaz();
    } else {
        JOptionPane.showMessageDialog(this, 
            "¡Proceso completado!", 
            "Información", 
            JOptionPane.INFORMATION_MESSAGE);
        System.exit(0);
    }  
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        System.out.println(id);
        Menu obj = new Menu(contraseña , nombre, id, conex);

        obj.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel tupu;
    // End of variables declaration//GEN-END:variables
}
